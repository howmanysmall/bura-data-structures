{"searchDocs":[{"title":"Installation","type":0,"sectionRef":"#","url":"/data-structures/docs/installation","content":"","keywords":"","version":"Next"},{"title":"Method #1 - RepoToRoblox​","type":1,"pageTitle":"Installation","url":"/data-structures/docs/installation#method-1---repotoroblox","content":" Using the RepoToRoblox plugin is the easiest way to install in Studio.  Make sure you have set your GitHub authentication token in the plugin settings.In the RepoToRoblox widget, enter howmanysmall as the owner and data-structures as the repository.Click the Clone Repository button.  ","version":"Next","tagName":"h2"},{"title":"Method 2 - Manual​","type":1,"pageTitle":"Installation","url":"/data-structures/docs/installation#method-2---manual","content":" Visit the latest releaseUnder Assets, click DataStructures.rbxm Using Rojo? Put the file somewhere where Rojo can sync it.Using Roblox Studio? Drag the file onto the viewport. It should insert under Workspace.  ","version":"Next","tagName":"h2"},{"title":"Method 3 - Wally​","type":1,"pageTitle":"Installation","url":"/data-structures/docs/installation#method-3---wally","content":" Setup Wally by using wally init.Add howmanysmall/data-structures as a dependency.  [dependencies] DataStructures = &quot;bura-games/data-structures@^1.0.1&quot;  ","version":"Next","tagName":"h2"},{"title":"Getting Started with DataStructures","type":0,"sectionRef":"#","url":"/data-structures/docs/intro","content":"Getting Started with DataStructures Here are some quick links to get started using DataStructures: Installation guideAPI Docs","keywords":"","version":"Next"},{"title":"Types","type":0,"sectionRef":"#","url":"/data-structures/api/Types","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Types","url":"/data-structures/api/Types#types","content":" ","version":null,"tagName":"h2"},{"title":"HeapEntry​","type":1,"pageTitle":"Types","url":"/data-structures/api/Types#HeapEntry","content":"&lt;/&gt; interface HeapEntry { Priority: number-- The priority of the element. Value: T-- The value of the element. } The data structure that represents an element in a MaxPriorityQueue or MinPriorityQueue.  ","version":null,"tagName":"h3"},{"title":"ComparisonFunction​","type":1,"pageTitle":"Types","url":"/data-structures/api/Types#ComparisonFunction","content":"&lt;/&gt; type ComparisonFunction = &lt;T&gt;( a: T, b: T ) → boolean A function that compares two values. ","version":null,"tagName":"h3"},{"title":"LiveRandom","type":0,"sectionRef":"#","url":"/data-structures/api/LiveRandom","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#new","content":"&lt;/&gt; LiveRandom.new( minimum: integer,-- The minimum value the random number can be. maximum?: integer,-- The maximum value the random number can be. seed?: number-- The seed to use for the random number generator. Defaults to os.clock()%1 * 1E7. ) → LiveRandom Creates a new LiveRandom instance. Default Values Like math.random, if you do not provide a maximum, the maximum becomes the minimum and the minimum becomes 1. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#Is","content":"&lt;/&gt; LiveRandom.Is(value: unknown) → boolean Checks if value is literally a LiveRandom. LiveRandom.Is(LiveRandom.new(100)) -- true LiveRandom.Is(LiveRandom) -- false LiveRandom.Is({}) -- false LiveRandom.Is(nil) -- false LiveRandom.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#instanceof","content":"&lt;/&gt; LiveRandom.instanceof(value: unknown) → boolean An alias for LiveRandom.Is.  ","version":null,"tagName":"h3"},{"title":"Get​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#Get","content":"&lt;/&gt; LiveRandom:Get() → integer Gets a random value.  ","version":null,"tagName":"h3"},{"title":"Peek​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#Peek","content":"&lt;/&gt; LiveRandom:Peek() → integer Peeks at the next value. This does not cause it to roll a new value.  ","version":null,"tagName":"h3"},{"title":"Rig​","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom#Rig","content":"&lt;/&gt; LiveRandom:Rig( value: integer-- The value to rig the random number generator to. ) → LiveRandom Rigs the random number generator, which forces the next value to be the given value. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"LiveRandom","url":"/data-structures/api/LiveRandom##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ","version":null,"tagName":"h3"},{"title":"MinPriorityQueue","type":0,"sectionRef":"#","url":"/data-structures/api/MinPriorityQueue","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#properties","content":" ","version":null,"tagName":"h2"},{"title":"Array​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#Array","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; MinPriorityQueue.Array: ReadonlyArray&lt;HeapEntry&lt;T&gt;&gt; An element with all your elements. This is technically a sorted array.  ","version":null,"tagName":"h3"},{"title":"Length​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#Length","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; MinPriorityQueue.Length: integer The length of the MinPriorityQueue. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#new","content":"&lt;/&gt; MinPriorityQueue.new() → MinPriorityQueue&lt;T&gt; Creates a new MinPriorityQueue.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#Is","content":"&lt;/&gt; MinPriorityQueue.Is(value: unknown) → boolean Checks if value is literally a MinPriorityQueue. MinPriorityQueue.Is(MinPriorityQueue.new()) -- true MinPriorityQueue.Is(MinPriorityQueue) -- false MinPriorityQueue.Is({}) -- false MinPriorityQueue.Is(nil) -- false MinPriorityQueue.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#instanceof","content":"&lt;/&gt; MinPriorityQueue.instanceof(value: unknown) → boolean An alias for MinPriorityQueue.Is.  ","version":null,"tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#Insert","content":"&lt;/&gt; MinPriorityQueue:Insert( value: T,-- The value to insert. priority: number-- The priority of the value. ) → integer-- The index of the element in the MinPriorityQueue. Adds an element to the MinPriorityQueue with an associated priority. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"InsertWithPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#InsertWithPriority","content":"&lt;/&gt; MinPriorityQueue:InsertWithPriority( value: T,-- The value to insert. priority: number-- The priority of the value. ) → integer-- The index of the element in the MinPriorityQueue. An alias for MinPriorityQueue.Insert.  ","version":null,"tagName":"h3"},{"title":"ChangePriority​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#ChangePriority","content":"&lt;/&gt; MinPriorityQueue:ChangePriority( value: T,-- The value to change the priority of. newPriority: number,-- The new priority of the value. equalityCheck?: ComparisonFunction&lt;T&gt;-- The function used to check if two values are equal. If unprovided, we'll default to ==. ) → integer-- The index of the element in the MinPriorityQueue. Allows you to change the priority of an element in the MinPriorityQueue. Time Complexity This function has kind of a funky time complexity on account of it treating your entries as immutable. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ValueNotFoundError\tThrown when you try to change the priority of an element that doesn't exist.  ","version":null,"tagName":"h3"},{"title":"GetFirstPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#GetFirstPriority","content":"&lt;/&gt; MinPriorityQueue:GetFirstPriority() → number? Gets the priority of the first value in the MinPriorityQueue. This is the value that will be removed last.  ","version":null,"tagName":"h3"},{"title":"GetLastPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#GetLastPriority","content":"&lt;/&gt; MinPriorityQueue:GetLastPriority() → number? Gets the priority of the last value in the MinPriorityQueue. This is the value that will be removed first.  ","version":null,"tagName":"h3"},{"title":"PopElement​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#PopElement","content":"&lt;/&gt; MinPriorityQueue:PopElement( onlyValue?: boolean-- Whether or not to return the value of the element. ) → HeapEntry&lt;T&gt; | T | nil Pops an element from the MinPriorityQueue. This removes the last element in the array. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"RemovePriority​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#RemovePriority","content":"&lt;/&gt; MinPriorityQueue:RemovePriority( priority: number-- The priority of the element to remove. ) → () Removes an element from the MinPriorityQueue with a specific priority. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"RemoveValue​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#RemoveValue","content":"&lt;/&gt; MinPriorityQueue:RemoveValue( value: T,-- The value of the element to remove. equalityCheck?: ComparisonFunction&lt;T&gt;-- The function used to check if two values are equal. If unprovided, we'll default to ==. ) → () Removes an element from the MinPriorityQueue with a specific value. Time Complexity This function does NOT use the binary search algorithm. It is uses a linear search (may change in the future) so it has the O(n) time complexity. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Clear​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#Clear","content":"&lt;/&gt; MinPriorityQueue:Clear() → MinPriorityQueue&lt;T&gt; Clears the entire MinPriorityQueue.  ","version":null,"tagName":"h3"},{"title":"Contains​","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue#Contains","content":"&lt;/&gt; MinPriorityQueue:Contains( value: T,-- The value of the element to remove. equalityCheck?: ComparisonFunction&lt;T&gt;-- The function used to check if two values are equal. If unprovided, we'll default to ==. ) → boolean Checks if the MinPriorityQueue contains a specific value. Time Complexity This function does NOT use the binary search algorithm. It is uses a linear search (may change in the future) so it has the O(n) time complexity. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"/data-structures/api/MinPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ","version":null,"tagName":"h3"},{"title":"Utf8Trie","type":0,"sectionRef":"#","url":"/data-structures/api/Utf8Trie","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#new","content":"&lt;/&gt; Utf8Trie.new() → Utf8Trie Creates a new Utf8Trie.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#Is","content":"&lt;/&gt; Utf8Trie.Is(value: unknown) → boolean Checks if value is literally a Utf8Trie. Utf8Trie.Is(Utf8Trie.new()) -- true Utf8Trie.Is(Utf8Trie) -- false Utf8Trie.Is({}) -- false Utf8Trie.Is(nil) -- false Utf8Trie.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#instanceof","content":"&lt;/&gt; Utf8Trie.instanceof(value: unknown) → boolean An alias for Utf8Trie.Is.  ","version":null,"tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#Insert","content":"&lt;/&gt; Utf8Trie:Insert( word: string-- The word to insert. ) → () Inserts a word into the trie. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Search​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#Search","content":"&lt;/&gt; Utf8Trie:Search( word: string-- The word to search for. ) → boolean-- true if the word exists in the trie, false otherwise. Searches for an exact word in the trie. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie##","content":"Type\tDescriptionDebugTypeError\tThrown when debug mode is enabled and `word` is not a string.  ","version":null,"tagName":"h3"},{"title":"StartsWith​","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie#StartsWith","content":"&lt;/&gt; Utf8Trie:StartsWith( prefix: string-- The prefix to check. ) → boolean-- true if any word starts with the prefix, false otherwise. Checks if any word in the trie starts with the given prefix. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"Utf8Trie","url":"/data-structures/api/Utf8Trie##","content":"Type\tDescriptionDebugTypeError\tThrown when debug mode is enabled and `prefix` is not a string. ","version":null,"tagName":"h3"},{"title":"SimpleTrie","type":0,"sectionRef":"#","url":"/data-structures/api/SimpleTrie","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#new","content":"&lt;/&gt; SimpleTrie.new() → SimpleTrie Creates a new SimpleTrie.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#Is","content":"&lt;/&gt; SimpleTrie.Is(value: unknown) → boolean Checks if value is literally a SimpleTrie. SimpleTrie.Is(SimpleTrie.new()) -- true SimpleTrie.Is(SimpleTrie) -- false SimpleTrie.Is({}) -- false SimpleTrie.Is(nil) -- false SimpleTrie.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#instanceof","content":"&lt;/&gt; SimpleTrie.instanceof(value: unknown) → boolean An alias for SimpleTrie.Is.  ","version":null,"tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#Insert","content":"&lt;/&gt; SimpleTrie:Insert( word: string-- The word to insert. ) → () Inserts a word into the trie. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Search​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#Search","content":"&lt;/&gt; SimpleTrie:Search( word: string-- The word to search for. ) → boolean-- true if the word exists in the trie, false otherwise. Searches for an exact word in the trie. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie##","content":"Type\tDescriptionDebugTypeError\tThrown when debug mode is enabled and `word` is not a string.  ","version":null,"tagName":"h3"},{"title":"StartsWith​","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie#StartsWith","content":"&lt;/&gt; SimpleTrie:StartsWith( prefix: string-- The prefix to check. ) → boolean-- true if any word starts with the prefix, false otherwise. Checks if any word in the trie starts with the given prefix. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SimpleTrie","url":"/data-structures/api/SimpleTrie##","content":"Type\tDescriptionDebugTypeError\tThrown when debug mode is enabled and `prefix` is not a string. ","version":null,"tagName":"h3"},{"title":"MaxPriorityQueue","type":0,"sectionRef":"#","url":"/data-structures/api/MaxPriorityQueue","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#properties","content":" ","version":null,"tagName":"h2"},{"title":"Array​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#Array","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; MaxPriorityQueue.Array: ReadonlyArray&lt;HeapEntry&lt;T&gt;&gt; An element with all your elements. This is technically a sorted array.  ","version":null,"tagName":"h3"},{"title":"Length​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#Length","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; MaxPriorityQueue.Length: integer The length of the MaxPriorityQueue. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#new","content":"&lt;/&gt; MaxPriorityQueue.new() → MaxPriorityQueue&lt;T&gt; Creates a new MaxPriorityQueue.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#Is","content":"&lt;/&gt; MaxPriorityQueue.Is(value: unknown) → boolean Checks if value is literally a MaxPriorityQueue. MaxPriorityQueue.Is(MaxPriorityQueue.new()) -- true MaxPriorityQueue.Is(MaxPriorityQueue) -- false MaxPriorityQueue.Is({}) -- false MaxPriorityQueue.Is(nil) -- false MaxPriorityQueue.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#instanceof","content":"&lt;/&gt; MaxPriorityQueue.instanceof(value: unknown) → boolean An alias for MaxPriorityQueue.Is.  ","version":null,"tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#Insert","content":"&lt;/&gt; MaxPriorityQueue:Insert( value: T,-- The value to insert. priority: number-- The priority of the value. ) → integer-- The index of the element in the MaxPriorityQueue. Adds an element to the MaxPriorityQueue with an associated priority. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"InsertWithPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#InsertWithPriority","content":"&lt;/&gt; MaxPriorityQueue:InsertWithPriority( value: T,-- The value to insert. priority: number-- The priority of the value. ) → integer-- The index of the element in the MaxPriorityQueue. An alias for MaxPriorityQueue.Insert.  ","version":null,"tagName":"h3"},{"title":"ChangePriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#ChangePriority","content":"&lt;/&gt; MaxPriorityQueue:ChangePriority( value: T,-- The value to change the priority of. newPriority: number,-- The new priority of the value. equalityCheck?: ComparisonFunction&lt;T&gt;-- The function used to check if two values are equal. If unprovided, we'll default to ==. ) → integer-- The index of the element in the MaxPriorityQueue. Allows you to change the priority of an element in the MaxPriorityQueue. Time Complexity This function has kind of a funky time complexity on account of it treating your entries as immutable. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ValueNotFoundError\tThrown when you try to change the priority of an element that doesn't exist.  ","version":null,"tagName":"h3"},{"title":"GetFirstPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#GetFirstPriority","content":"&lt;/&gt; MaxPriorityQueue:GetFirstPriority() → number? Gets the priority of the first value in the MaxPriorityQueue. This is the value that will be removed last.  ","version":null,"tagName":"h3"},{"title":"GetLastPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#GetLastPriority","content":"&lt;/&gt; MaxPriorityQueue:GetLastPriority() → number? Gets the priority of the last value in the MaxPriorityQueue. This is the value that will be removed first.  ","version":null,"tagName":"h3"},{"title":"PopElement​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#PopElement","content":"&lt;/&gt; MaxPriorityQueue:PopElement( onlyValue?: boolean-- Whether or not to return the value of the element. ) → HeapEntry&lt;T&gt; | T | nil Pops an element from the MaxPriorityQueue. This removes the last element in the array. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"RemovePriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#RemovePriority","content":"&lt;/&gt; MaxPriorityQueue:RemovePriority( priority: number-- The priority of the element to remove. ) → () Removes an element from the MaxPriorityQueue with a specific priority. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"RemoveValue​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#RemoveValue","content":"&lt;/&gt; MaxPriorityQueue:RemoveValue( value: T,-- The value of the element to remove. equalityCheck?: ComparisonFunction&lt;T&gt;-- The function used to check if two values are equal. If unprovided, we'll default to ==. ) → () Removes an element from the MaxPriorityQueue with a specific value. Time Complexity This function does NOT use the binary search algorithm. It is uses a linear search (may change in the future) so it has the O(n) time complexity. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Clear​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#Clear","content":"&lt;/&gt; MaxPriorityQueue:Clear() → MaxPriorityQueue&lt;T&gt; Clears the entire MaxPriorityQueue.  ","version":null,"tagName":"h3"},{"title":"Contains​","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue#Contains","content":"&lt;/&gt; MaxPriorityQueue:Contains( value: T,-- The value of the element to remove. equalityCheck?: ComparisonFunction&lt;T&gt;-- The function used to check if two values are equal. If unprovided, we'll default to ==. ) → boolean Checks if the MaxPriorityQueue contains a specific value. Time Complexity This function does NOT use the binary search algorithm. It is uses a linear search (may change in the future) so it has the O(n) time complexity. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"/data-structures/api/MaxPriorityQueue##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ","version":null,"tagName":"h3"},{"title":"LRUCache","type":0,"sectionRef":"#","url":"/data-structures/api/LRUCache","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#properties","content":" ","version":null,"tagName":"h2"},{"title":"Capacity​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#Capacity","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; LRUCache.Capacity: integer The maximum number of items the cache can hold.  ","version":null,"tagName":"h3"},{"title":"Size​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#Size","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; LRUCache.Size: integer The current number of items in the cache. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#new","content":"&lt;/&gt; LRUCache.new( capacity: number-- The maximum number of items the cache can hold. ) → LRUCache&lt;K,V&gt; Creates a new LRU cache. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#Is","content":"&lt;/&gt; LRUCache.Is(value: unknown) → boolean Checks if value is literally an LRUCache. LRUCache.Is(LRUCache.new(10)) -- true LRUCache.Is(LRUCache) -- false LRUCache.Is({}) -- false LRUCache.Is(nil) -- false LRUCache.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#instanceof","content":"&lt;/&gt; LRUCache.instanceof(value: unknown) → boolean An alias for LRUCache.Is.  ","version":null,"tagName":"h3"},{"title":"Get​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#Get","content":"&lt;/&gt; LRUCache:Get( key: K-- The key to get the value for. ) → V? Gets the value associated with the given key. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Set​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#Set","content":"&lt;/&gt; LRUCache:Set( key: K,-- The key to set the value to. value: V-- The value to set. ) → () Sets the value to the given key. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Clear​","type":1,"pageTitle":"LRUCache","url":"/data-structures/api/LRUCache#Clear","content":"&lt;/&gt; LRUCache:Clear() → () Clears the cache. ","version":null,"tagName":"h3"},{"title":"SortedArray","type":0,"sectionRef":"#","url":"/data-structures/api/SortedArray","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#properties","content":" ","version":null,"tagName":"h2"},{"title":"Array​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Array","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SortedArray.Array: ReadonlyArray&lt;T&gt; The actual array of data. You can iterate over this or index it. Readonly PLEASE treat this array as readonly. Do not mutate it directly.  ","version":null,"tagName":"h3"},{"title":"Comparison​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Comparison","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SortedArray.Comparison: ComparisonFunction&lt;T&gt;? The comparison function of the SortedArray. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#new","content":"&lt;/&gt; SortedArray.new( baseArray?: {T},-- An array of data which will be sorted upon instantiation. If this is omitted, an empty array is used. comparison?: ComparisonFunction&lt;T&gt;-- An optional comparison function which is used to customize the element sorting, which will be given two elements a and b from the array as parameters. The function should return a boolean value specifying whether the first argument should be before the second argument in the sequence. If no comparison function is passed, the Luau-default a &lt; b sorting is used. ) → SortedArray&lt;T&gt; Instantiates and returns a new SortedArray, with optional parameters. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Is​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Is","content":"&lt;/&gt; SortedArray.Is(value: unknown) → boolean Checks if value is literally a SortedArray. SortedArray.Is(SortedArray.new()) -- true SortedArray.Is(SortedArray) -- false SortedArray.Is({}) -- false SortedArray.Is(nil) -- false SortedArray.Is(1) -- false   ","version":null,"tagName":"h3"},{"title":"instanceof​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#instanceof","content":"&lt;/&gt; SortedArray.instanceof(value: unknown) → boolean An alias for SortedArray.Is.  ","version":null,"tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Insert","content":"&lt;/&gt; SortedArray:Insert( value: T-- The value you want to insert. ) → integer-- The index at which it was inserted. Inserts an element in the proper place which would preserve the array's sorted order. Returns the index the element was inserted. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Find​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Find","content":"&lt;/&gt; SortedArray:Find( value: T,-- The value you want to find. equalityCheck?: ComparisonFunction&lt;T&gt;,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. lessThan?: ComparisonFunction&lt;T&gt;,-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. low?: integer,-- An optional lower bound for the search. Defaults to 1. high?: integer-- An optional upper bound for the search. Defaults to the length of the SortedArray. ) → integer?-- The index of the element, or nil if it doesn't exist. Finds an element in a SortedArray and returns its position (or nil if non-existent). ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"IndexOf​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#IndexOf","content":"&lt;/&gt; SortedArray:IndexOf( value: T,-- The value you want to find. equalityCheck?: ComparisonFunction&lt;T&gt;,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. lessThan?: ComparisonFunction&lt;T&gt;,-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. low?: integer,-- An optional lower bound for the search. Defaults to 1. high?: integer-- An optional upper bound for the search. Defaults to the length of the SortedArray. ) → integer?-- The index of the element, or nil if it doesn't exist. An alias for SortedArray.Find. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Copy​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Copy","content":"&lt;/&gt; SortedArray:Copy() → {T}-- A shallow copy of the data. Makes a shallow copy of the SortedArray's array.  ","version":null,"tagName":"h3"},{"title":"CopyDeep​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#CopyDeep","content":"&lt;/&gt; SortedArray:CopyDeep() → {T}-- A deep copy of the data. Makes a deep copy of the SortedArray's array.  ","version":null,"tagName":"h3"},{"title":"Clone​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Clone","content":"&lt;/&gt; SortedArray:Clone() → SortedArray&lt;T&gt;-- A shallow copy of the SortedArray. Makes a shallow copy of the SortedArray and returns a new SortedArray. Probably would recommend SortedArray.CloneDeep instead because of funny cache misses.  ","version":null,"tagName":"h3"},{"title":"CloneDeep​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#CloneDeep","content":"&lt;/&gt; SortedArray:CloneDeep() → SortedArray&lt;T&gt;-- A deep copy of the SortedArray. Makes a deep copy of the SortedArray and returns a new SortedArray.  ","version":null,"tagName":"h3"},{"title":"Clear​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Clear","content":"since v1.1.0 &lt;/&gt; SortedArray:Clear() → SortedArray&lt;T&gt; Clears the SortedArray.  ","version":null,"tagName":"h3"},{"title":"RemoveElement​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#RemoveElement","content":"&lt;/&gt; SortedArray:RemoveElement( signature: T,-- The value you want to remove. equalityCheck?: ComparisonFunction&lt;T&gt;,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. lessThan?: ComparisonFunction&lt;T&gt;-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. ) → T?-- The removed value. Searches the array via SortedArray.Find. If found, it removes the value and returns the value, otherwise returns undefined. Only removes a single occurrence. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"RemoveIndex​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#RemoveIndex","content":"&lt;/&gt; SortedArray:RemoveIndex( index: integer-- The index of the element to remove. ) → T?-- The removed element. Removes an element from the SortedArray by index. Returns the removed element. This is literally just table.remove. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"Pop​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Pop","content":"&lt;/&gt; SortedArray:Pop() → T?-- The removed element. Pops an element from the SortedArray. This just removes the last element.  ","version":null,"tagName":"h3"},{"title":"Shift​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Shift","content":"&lt;/&gt; SortedArray:Shift() → T?-- The removed element. Shifts element from the SortedArray. This just removes the first element.  ","version":null,"tagName":"h3"},{"title":"Sort​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#Sort","content":"&lt;/&gt; SortedArray:Sort() → SortedArray&lt;T&gt; Does table.sort on the SortedArray's array. Pretty useless.  ","version":null,"tagName":"h3"},{"title":"SortIndex​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#SortIndex","content":"&lt;/&gt; SortedArray:SortIndex( index: integer-- The index of the element to sort. ) → integer-- The new position of the element. Removes the value at index and re-inserts it. This is useful for when a value may have updated in a way that could change it's position in a SortedArray. Returns the new position of the element. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ElementNotFoundError\tThrown when the element you are trying to sort is not found.  ","version":null,"tagName":"h3"},{"title":"SortElement​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#SortElement","content":"&lt;/&gt; SortedArray:SortElement( signature: T,-- The value you want to remove. equalityCheck?: ComparisonFunction&lt;T&gt;,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. lessThan?: ComparisonFunction&lt;T&gt;-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. ) → integer-- The new position of the element. Calls SortedArray.RemoveElement(signature, equalityCheck, lessThan) and re-inserts the value. This is useful for when a value may have updated in a way that could change it's position in a SortedArray. Returns the new position of the element. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type. ElementNotFoundError\tThrown when the element you are trying to sort is not found.  ","version":null,"tagName":"h3"},{"title":"GetIntersection​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#GetIntersection","content":"&lt;/&gt; SortedArray:GetIntersection( other: SortedArray&lt;T&gt;,-- The other SortedArray to get the intersection with. equalityCheck?: ComparisonFunction&lt;T&gt;,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. lessThan?: ComparisonFunction&lt;T&gt;-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. ) → SortedArray&lt;T&gt;-- The intersection of the two SortedArrays. This is a new SortedArray. Gets an intersection between two SortedArrays. ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray##","content":"Type\tDescriptionDebugTypeError\tThrown when you are using debug mode and you pass an incorrect type.  ","version":null,"tagName":"h3"},{"title":"IsEmpty​","type":1,"pageTitle":"SortedArray","url":"/data-structures/api/SortedArray#IsEmpty","content":"&lt;/&gt; SortedArray:IsEmpty() → boolean Checks if the SortedArray is empty. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}