"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[360],{50777:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new `LiveRandom` instance.\\n\\n\\n:::info Default Values\\nLike `math.random`, if you do not provide a maximum, the maximum becomes\\nthe minimum and the minimum becomes 1.\\n:::","params":[{"name":"minimum","desc":"The minimum value the random number can be.","lua_type":"integer"},{"name":"maximum?","desc":"The maximum value the random number can be.","lua_type":"integer"},{"name":"seed?","desc":"The seed to use for the random number generator. Defaults to `os.clock()%1 * 1E7`.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"LiveRandom"}],"function_type":"static","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":116,"path":"src/Random/LiveRandom.luau"}},{"name":"Is","desc":"Checks if `value` is literally a `LiveRandom`.\\n\\n```lua\\nLiveRandom.Is(LiveRandom.new(100)) -- true\\nLiveRandom.Is(LiveRandom) -- false\\nLiveRandom.Is({}) -- false\\nLiveRandom.Is(nil) -- false\\nLiveRandom.Is(1) -- false\\n```","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":174,"path":"src/Random/LiveRandom.luau"}},{"name":"instanceof","desc":"An alias for [LiveRandom.Is].","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":186,"path":"src/Random/LiveRandom.luau"}},{"name":"Get","desc":"Gets a random value.","params":[],"returns":[{"desc":"","lua_type":"integer"}],"function_type":"method","source":{"line":196,"path":"src/Random/LiveRandom.luau"}},{"name":"Peek","desc":"Peeks at the next value. This does not cause it to roll a new value.","params":[],"returns":[{"desc":"","lua_type":"integer"}],"function_type":"method","source":{"line":221,"path":"src/Random/LiveRandom.luau"}},{"name":"Rig","desc":"Rigs the random number generator, which forces the next value to be the\\ngiven value.","params":[{"name":"value","desc":"The value to rig the random number generator to.","lua_type":"integer"}],"returns":[{"desc":"","lua_type":"LiveRandom"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":245,"path":"src/Random/LiveRandom.luau"}}],"properties":[],"types":[],"name":"LiveRandom","desc":"## LiveRandom\\n\\nWill loop through all of the numbers in range before repeating. Does not\\nuse any table nor any messy bash, just math. B)\\n\\nIt first finds a co-prime integer to n between 1 and (n - 1) and constantly increments a running sum.\\n\\n- This is guaranteed to touch all of the integers.\\n\\n### Complexity\\n\\n- **Storage:** `O(1)`\\n- **Construction:** `O(log(n))`\\n- **Get:** `O(1)`","tags":["Supports Debug Mode","Supports __tostring"],"source":{"line":96,"path":"src/Random/LiveRandom.luau"}}')}}]);