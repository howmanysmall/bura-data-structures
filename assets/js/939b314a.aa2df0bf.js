"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[775],{8177:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new LRU cache.","params":[{"name":"capacity","desc":"The maximum number of items the cache can hold.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"LRUCache<K, V>"}],"function_type":"static","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":275,"path":"src/Caches/LRUCache.luau"}},{"name":"Is","desc":"Checks if `value` is literally an LRUCache.\\n\\n```lua\\nLRUCache.Is(LRUCache.new(10)) -- true\\nLRUCache.Is(LRUCache) -- false\\nLRUCache.Is({}) -- false\\nLRUCache.Is(nil) -- false\\nLRUCache.Is(1) -- false\\n```","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":311,"path":"src/Caches/LRUCache.luau"}},{"name":"instanceof","desc":"An alias for [LRUCache.Is].","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":323,"path":"src/Caches/LRUCache.luau"}},{"name":"Get","desc":"Gets the value associated with the given key.","params":[{"name":"key","desc":"The key to get the value for.","lua_type":"K"}],"returns":[{"desc":"","lua_type":"V?"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":400,"path":"src/Caches/LRUCache.luau"}},{"name":"Set","desc":"Sets the value to the given key.","params":[{"name":"key","desc":"The key to set the value to.","lua_type":"K"},{"name":"value","desc":"The value to set.","lua_type":"V"}],"returns":[],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":432,"path":"src/Caches/LRUCache.luau"}},{"name":"Clear","desc":"Clears the cache.","params":[],"returns":[],"function_type":"method","source":{"line":466,"path":"src/Caches/LRUCache.luau"}}],"properties":[{"name":"Capacity","desc":"The maximum number of items the cache can hold.","lua_type":"integer","readonly":true,"source":{"line":247,"path":"src/Caches/LRUCache.luau"}},{"name":"Size","desc":"The current number of items in the cache.","lua_type":"integer","readonly":true,"source":{"line":253,"path":"src/Caches/LRUCache.luau"}}],"types":[],"name":"LRUCache","desc":"The `LRUCache` (Least Recently Used Cache) class implements a fixed-size\\ncache that stores key-value pairs. It uses the Least Recently Used eviction\\npolicy to manage the cache content when the capacity is exceeded. This\\nmeans that when the cache reaches its capacity, it will remove the least\\nrecently accessed item to make room for new entries.\\n\\n### Features:\\n\\n- **Fast Retrieval:** Quickly access cached items using the `Get` method.\\n- **Automatic Eviction:** Automatically evicts the least recently used item\\n  when adding new entries beyond capacity.\\n- **Mutable Size:** Check the current number of items with `Size`.\\n- **Capacity Limit:** Set a maximum capacity to control memory usage.\\n- **Supports Debug Mode:** You can set `_G.__DEV__` to `true` to enable\\n  debug mode. This has to be done BEFORE requiring the module.\\n- **Supports `__len`:** Use the length operator `#` to get the cache size.\\n- **Supports `__tostring`:** You can call `tostring` on the cache.\\n\\n### Example Usage:\\n\\n```lua\\n_G.__DEV__ = RunService:IsStudio()\\nlocal DataStructures = require(\\"DataStructures\\")\\n\\n-- Create a new cache with a capacity of 2\\nlocal lruCache = DataStructures.LRUCache.new(2)\\n\\n-- Add some key-value pairs\\nlruCache:Set(\\"apple\\", \\"red\\")\\nlruCache:Set(\\"banana\\", \\"yellow\\")\\n\\nprint(lruCache:Get(\\"apple\\")) -- Output: \\"red\\"\\nprint(lruCache:Get(\\"banana\\")) -- Output: \\"yellow\\"\\n\\n-- Add another item, exceeding the capacity\\nlruCache:Set(\\"cherry\\", \\"red\\")\\n\\n-- Since \\"apple\\" was least recently used, it gets evicted\\nprint(lruCache:Get(\\"apple\\")) -- Output: nil\\nprint(lruCache:Get(\\"cherry\\")) -- Output: \\"red\\"\\n\\n-- Check the size of the cache\\nprint(#lruCache, lruCache.Size) -- Output: 2, 2\\n\\n-- Clear the cache\\nlruCache:Clear()\\nprint(#lruCache, lruCache.Size) -- Output: 0, 0\\n```\\n\\n### Methods:\\n\\n- **`LRUCache.new(capacity: number): LRUCache`**\\n\\t- Creates a new `LRUCache` instance with the specified capacity.\\n\\t- **Parameters:**\\n\\t\\t- `capacity` (number): The maximum number of items the cache can\\n\\t\\t  hold.\\n\\t- **Returns:** A new `LRUCache` object.\\n\\n- **`LRUCache:Get(key: K): V?`**\\n\\t- Retrieves the value associated with the given key.\\n\\t- Marks the key as recently used.\\n\\t- **Parameters:**\\n\\t\\t- `key` (K): The key to look up.\\n\\t- **Returns:** The value associated with the key, or `nil` if not found.\\n\\n- **`LRUCache:Set(key: K, value: V): void`**\\n\\t- Adds or updates a key-value pair in the cache.\\n\\t- If the key already exists, its value is updated, and it is marked as\\n\\t  recently used.\\n\\t- If adding the new key exceeds the capacity, the least recently used\\n\\t  item is evicted.\\n\\t- **Parameters:**\\n\\t\\t- `key` (K): The key to insert or update.\\n\\t\\t- `value` (V): The value to associate with the key.\\n\\n- **`LRUCache:Clear(): void`**\\n\\t- Removes all items from the cache.\\n\\n### Properties:\\n\\n- **`LRUCache.Capacity: number`** (read-only)\\n\\t- The maximum number of items the cache can hold.\\n\\n- **`LRUCache.Size: number`**\\n\\t- The current number of items in the cache.\\n\\n### Tags:\\n\\n- `Supports Debug Mode`: You can set `_G.__DEV__` to `true` to enable\\n  debug mode. This has to be done BEFORE requiring the module.\\n- `Supports __len`: You can use the `#` operator to get the current size\\n  of the cache.\\n- `Supports __tostring`: You can call `tostring` on the cache.","tags":["Supports Debug Mode","Supports __len","Supports __tostring"],"source":{"line":236,"path":"src/Caches/LRUCache.luau"}}')}}]);