"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[340],{16310:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new SimpleTrie.","params":[],"returns":[{"desc":"","lua_type":"SimpleTrie"}],"function_type":"static","source":{"line":145,"path":"src/Tries/SimpleTrie.luau"}},{"name":"Is","desc":"Checks if `value` is literally a `SimpleTrie`.\\n\\n```lua\\nSimpleTrie.Is(SimpleTrie.new()) -- true\\nSimpleTrie.Is(SimpleTrie) -- false\\nSimpleTrie.Is({}) -- false\\nSimpleTrie.Is(nil) -- false\\nSimpleTrie.Is(1) -- false\\n```","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":168,"path":"src/Tries/SimpleTrie.luau"}},{"name":"instanceof","desc":"An alias for [SimpleTrie.Is].","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":180,"path":"src/Tries/SimpleTrie.luau"}},{"name":"Insert","desc":"Inserts a word into the trie.","params":[{"name":"word","desc":"The word to insert.","lua_type":"string"}],"returns":[],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":188,"path":"src/Tries/SimpleTrie.luau"}},{"name":"Search","desc":"Searches for an exact word in the trie.","params":[{"name":"word","desc":"The word to search for.","lua_type":"string"}],"returns":[{"desc":"`true` if the word exists in the trie, `false` otherwise.","lua_type":"boolean"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when debug mode is enabled and `word` is not a string."}],"source":{"line":227,"path":"src/Tries/SimpleTrie.luau"}},{"name":"StartsWith","desc":"Checks if any word in the trie starts with the given prefix.","params":[{"name":"prefix","desc":"The prefix to check.","lua_type":"string"}],"returns":[{"desc":"`true` if any word starts with the prefix, `false` otherwise.","lua_type":"boolean"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when debug mode is enabled and `prefix` is not a string."}],"source":{"line":258,"path":"src/Tries/SimpleTrie.luau"}}],"properties":[],"types":[],"name":"SimpleTrie","desc":"The `SimpleTrie` class implements a basic trie (prefix tree) data structure\\nfor efficient storage and retrieval of strings. It allows you to insert\\nwords, search for exact matches, and check if any words in the trie start\\nwith a given prefix. If you need utf8 support, use the [Utf8Trie] class.\\n\\n### Features:\\n\\n- **Efficient String Storage:** Stores strings in a hierarchical structure\\n  for fast retrieval and minimal redundancy.\\n- **Word Insertion:** Add words to the trie using the `Insert` method.\\n- **Exact Word Search:** Determine if a word exists in the trie with the\\n  `Search` method.\\n- **Prefix Matching:** Use the `StartsWith` method to check if any words\\n  start with a given prefix.\\n- **Supports Debug Mode:** Enable debug mode by setting `_G.__DEV__ = true`\\n  before requiring the module to enforce type checks and provide detailed\\n  error messages.\\n\\n### Example Usage:\\n\\n```lua\\n_G.__DEV__ = RunService:IsStudio()\\nlocal DataStructures = require(\\"DataStructures\\")\\n\\n-- Create a new trie\\nlocal trie = DataStructures.SimpleTrie.new()\\n\\n-- Insert words\\ntrie:Insert(\\"apple\\")\\ntrie:Insert(\\"app\\")\\ntrie:Insert(\\"banana\\")\\n\\n-- Search for exact words\\nprint(trie:Search(\\"apple\\"))   -- Output: true\\nprint(trie:Search(\\"app\\"))     -- Output: true\\nprint(trie:Search(\\"apples\\"))  -- Output: false\\n\\n-- Check for prefixes\\nprint(trie:StartsWith(\\"app\\"))   -- Output: true\\nprint(trie:StartsWith(\\"ban\\"))   -- Output: true\\nprint(trie:StartsWith(\\"bat\\"))   -- Output: false\\n\\n-- Check if an object is a SimpleTrie\\nprint(DataStructures.SimpleTrie.Is(trie))     -- Output: true\\nprint(DataStructures.SimpleTrie.Is({}))       -- Output: false\\n\\n-- String representation\\nprint(tostring(trie))          -- Output: \\"SimpleTrie\\"\\n```\\n\\n### Methods:\\n\\n- **`SimpleTrie.new(): SimpleTrie`**\\n\\t- Creates a new `SimpleTrie` instance.\\n\\t- **Returns:** A new `SimpleTrie` object.\\n\\n- **`SimpleTrie:Insert(word: string): void`**\\n\\t- Inserts a word into the trie.\\n\\t- **Parameters:**\\n\\t\\t- `word` (string): The word to insert into the trie.\\n\\t- **Errors:**\\n\\t\\t- **`DebugTypeError`**: Thrown when debug mode is enabled and\\n\\t\\t  `word` is not a string.\\n\\n- **`SimpleTrie:Search(word: string): boolean`**\\n\\t- Searches for an exact word in the trie.\\n\\t- **Parameters:**\\n\\t\\t- `word` (string): The word to search for.\\n\\t- **Returns:** `true` if the word exists in the trie, `false`\\n\\t  otherwise.\\n\\t- **Errors:**\\n\\t\\t- **`DebugTypeError`**: Thrown when debug mode is enabled and\\n\\t\\t  `word` is not a string.\\n\\n- **`SimpleTrie:StartsWith(prefix: string): boolean`**\\n\\t- Checks if any word in the trie starts with the given prefix.\\n\\t- **Parameters:**\\n\\t\\t- `prefix` (string): The prefix to check.\\n\\t- **Returns:** `true` if any word starts with the prefix, `false` otherwise.\\n\\t- **Errors:**\\n\\t\\t- **`DebugTypeError`**: Thrown when debug mode is enabled and\\n\\t\\t  `prefix` is not a string.\\n\\n- **`SimpleTrie.Is(value: any): boolean`**\\n\\t- Checks if the given value is an instance of `SimpleTrie`.\\n\\t- **Parameters:**\\n\\t\\t- `value` (any): The value to check.\\n\\t- **Returns:** `true` if `value` is a `SimpleTrie` instance, `false`\\n\\t  otherwise.\\n\\n- **`SimpleTrie.instanceof(value: any): boolean`**\\n\\t- Alias for `SimpleTrie.Is`.\\n\\n### Tags:\\n\\n- `Supports Debug Mode`: You can set `_G.__DEV__` to `true` to enable\\n  debug mode. This has to be done BEFORE requiring the module.\\n- `Supports __tostring`: You can call `tostring` on the trie.","tags":["Supports Debug Mode","Supports __tostring"],"source":{"line":136,"path":"src/Tries/SimpleTrie.luau"}}')}}]);