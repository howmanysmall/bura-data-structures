"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[739],{94097:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new MaxPriorityQueue.","params":[],"returns":[{"desc":"","lua_type":"MaxPriorityQueue<T>"}],"function_type":"static","source":{"line":138,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"Is","desc":"Checks if `value` is literally a `MaxPriorityQueue`.\\n\\n```lua\\nMaxPriorityQueue.Is(MaxPriorityQueue.new()) -- true\\nMaxPriorityQueue.Is(MaxPriorityQueue) -- false\\nMaxPriorityQueue.Is({}) -- false\\nMaxPriorityQueue.Is(nil) -- false\\nMaxPriorityQueue.Is(1) -- false\\n```","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":159,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"instanceof","desc":"An alias for [MaxPriorityQueue.Is].","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":171,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"Insert","desc":"Adds an element to the `MaxPriorityQueue` with an associated priority.","params":[{"name":"value","desc":"The value to insert.","lua_type":"T"},{"name":"priority","desc":"The priority of the value.","lua_type":"number"}],"returns":[{"desc":"The index of the element in the `MaxPriorityQueue`.","lua_type":"integer"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":225,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"InsertWithPriority","desc":"An alias for [MaxPriorityQueue.Insert].","params":[{"name":"value","desc":"The value to insert.","lua_type":"T"},{"name":"priority","desc":"The priority of the value.","lua_type":"number"}],"returns":[{"desc":"The index of the element in the `MaxPriorityQueue`.","lua_type":"integer"}],"function_type":"method","source":{"line":236,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"ChangePriority","desc":"Allows you to change the priority of an element in the `MaxPriorityQueue`.\\n\\n:::info Time Complexity\\nThis function has kind of a funky time complexity on account of it treating\\nyour entries as immutable.\\n:::","params":[{"name":"value","desc":"The value to change the priority of.","lua_type":"T"},{"name":"newPriority","desc":"The new priority of the value.","lua_type":"number"},{"name":"equalityCheck?","desc":"The function used to check if two values are equal. If unprovided, we\'ll default to `==`.","lua_type":"ComparisonFunction<T>"}],"returns":[{"desc":"The index of the element in the `MaxPriorityQueue`.","lua_type":"integer"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."},{"lua_type":"ValueNotFoundError","desc":"Thrown when you try to change the priority of an element that doesn\'t exist."}],"source":{"line":254,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"GetFirstPriority","desc":"Gets the priority of the first value in the `MaxPriorityQueue`. This is the\\nvalue that will be removed last.","params":[],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","source":{"line":309,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"GetLastPriority","desc":"Gets the priority of the last value in the `MaxPriorityQueue`. This is the\\nvalue that will be removed first.","params":[],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","source":{"line":318,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"PopElement","desc":"Pops an element from the `MaxPriorityQueue`. This removes the last element\\nin the array.","params":[{"name":"onlyValue?","desc":"Whether or not to return the value of the element.","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"HeapEntry<T> | T | nil"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":332,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"RemovePriority","desc":"Removes an element from the `MaxPriorityQueue` with a specific priority.","params":[{"name":"priority","desc":"The priority of the element to remove.","lua_type":"number"}],"returns":[],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":364,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"RemoveValue","desc":"Removes an element from the `MaxPriorityQueue` with a specific value.\\n\\n:::warning Time Complexity\\nThis function does _NOT_ use the binary search algorithm. It is uses a\\nlinear search (may change in the future) so it has the O(n) time\\ncomplexity.\\n:::","params":[{"name":"value","desc":"The value of the element to remove.","lua_type":"T"},{"name":"equalityCheck?","desc":"The function used to check if two values are equal. If unprovided, we\'ll default to `==`.","lua_type":"ComparisonFunction<T>"}],"returns":[],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":401,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"Clear","desc":"Clears the entire `MaxPriorityQueue`.","params":[],"returns":[{"desc":"","lua_type":"MaxPriorityQueue<T>"}],"function_type":"method","source":{"line":443,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"Contains","desc":"Checks if the `MaxPriorityQueue` contains a specific value.\\n\\n:::warning Time Complexity\\nThis function does _NOT_ use the binary search algorithm. It is uses a\\nlinear search (may change in the future) so it has the O(n) time\\ncomplexity.\\n:::","params":[{"name":"value","desc":"The value of the element to remove.","lua_type":"T"},{"name":"equalityCheck?","desc":"The function used to check if two values are equal. If unprovided, we\'ll default to `==`.","lua_type":"ComparisonFunction<T>"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":464,"path":"src/Queues/MaxPriorityQueue.luau"}}],"properties":[{"name":"Array","desc":"An element with all your elements. This is technically a sorted array.","lua_type":"ReadonlyArray<HeapEntry<T>>","readonly":true,"source":{"line":99,"path":"src/Queues/MaxPriorityQueue.luau"}},{"name":"Length","desc":"The length of the `MaxPriorityQueue`.","lua_type":"integer","readonly":true,"source":{"line":107,"path":"src/Queues/MaxPriorityQueue.luau"}}],"types":[],"name":"MaxPriorityQueue","desc":"In a max priority queue, elements are inserted by the priority in ascending\\norder and the maximum value is always removed first from the queue.\\n\\nThis uses a sorted array internally for the maximum speed possible when\\ninserting, popping, and removing by priority.","tags":["Supports Debug Mode","Supports __len","Supports __tostring"],"source":{"line":87,"path":"src/Queues/MaxPriorityQueue.luau"}}')}}]);