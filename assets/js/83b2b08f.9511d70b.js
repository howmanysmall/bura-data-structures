"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[776],{9642:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Instantiates and returns a new SortedArray, with optional parameters.","params":[{"name":"baseArray?","desc":"An array of data which will be sorted upon instantiation. If this is omitted, an empty array is used.","lua_type":"{T}"},{"name":"comparison?","desc":"An optional comparison function which is used to customize the element sorting, which will be given two elements `a` and `b` from the array as parameters. The function should return a boolean value specifying whether the first argument should be before the second argument in the sequence. If no comparison function is passed, the Luau-default `a < b` sorting is used.","lua_type":"ComparisonFunction<T>"}],"returns":[{"desc":"","lua_type":"SortedArray<T>"}],"function_type":"static","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":434,"path":"src/Arrays/SortedArray.luau"}},{"name":"Is","desc":"Checks if `value` is literally a `SortedArray`.\\n\\n```lua\\nSortedArray.Is(SortedArray.new()) -- true\\nSortedArray.Is(SortedArray) -- false\\nSortedArray.Is({}) -- false\\nSortedArray.Is(nil) -- false\\nSortedArray.Is(1) -- false\\n```","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":472,"path":"src/Arrays/SortedArray.luau"}},{"name":"instanceof","desc":"An alias for [SortedArray.Is].","params":[{"name":"value","desc":"","lua_type":"unknown"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":484,"path":"src/Arrays/SortedArray.luau"}},{"name":"Insert","desc":"Inserts an element in the proper place which would preserve the array\'s\\nsorted order. Returns the index the element was inserted.","params":[{"name":"value","desc":"The value you want to insert.","lua_type":"T"}],"returns":[{"desc":"The index at which it was inserted.","lua_type":"integer"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":580,"path":"src/Arrays/SortedArray.luau"}},{"name":"Find","desc":"Finds an element in a `SortedArray` and returns its position (or `nil` if\\nnon-existent).","params":[{"name":"value","desc":"The value you want to find.","lua_type":"T"},{"name":"equalityCheck?","desc":"An optional function which checks for equality between the passed-in element and the other elements in the SortedArray.","lua_type":"ComparisonFunction<T>"},{"name":"lessThan?","desc":"An optional less-than comparison function, which falls back on the comparison passed in from [SortedArray.new].","lua_type":"ComparisonFunction<T>"},{"name":"low?","desc":"An optional lower bound for the search. Defaults to `1`.","lua_type":"integer"},{"name":"high?","desc":"An optional upper bound for the search. Defaults to the length of the SortedArray.","lua_type":"integer"}],"returns":[{"desc":"The index of the element, or `nil` if it doesn\'t exist.","lua_type":"integer?"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":655,"path":"src/Arrays/SortedArray.luau"}},{"name":"IndexOf","desc":"An alias for [SortedArray.Find].","params":[{"name":"value","desc":"The value you want to find.","lua_type":"T"},{"name":"equalityCheck?","desc":"An optional function which checks for equality between the passed-in element and the other elements in the SortedArray.","lua_type":"ComparisonFunction<T>"},{"name":"lessThan?","desc":"An optional less-than comparison function, which falls back on the comparison passed in from [SortedArray.new].","lua_type":"ComparisonFunction<T>"},{"name":"low?","desc":"An optional lower bound for the search. Defaults to `1`.","lua_type":"integer"},{"name":"high?","desc":"An optional upper bound for the search. Defaults to the length of the SortedArray.","lua_type":"integer"}],"returns":[{"desc":"The index of the element, or `nil` if it doesn\'t exist.","lua_type":"integer?"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":671,"path":"src/Arrays/SortedArray.luau"}},{"name":"Copy","desc":"Makes a shallow copy of the SortedArray\'s array.","params":[],"returns":[{"desc":"A shallow copy of the data.","lua_type":"{T}"}],"function_type":"method","source":{"line":677,"path":"src/Arrays/SortedArray.luau"}},{"name":"CopyDeep","desc":"Makes a deep copy of the SortedArray\'s array.","params":[],"returns":[{"desc":"A deep copy of the data.","lua_type":"{T}"}],"function_type":"method","source":{"line":695,"path":"src/Arrays/SortedArray.luau"}},{"name":"Clone","desc":"Makes a shallow copy of the SortedArray and returns a new SortedArray.\\nProbably would recommend [SortedArray.CloneDeep] instead because of\\nfunny cache misses.","params":[],"returns":[{"desc":"A shallow copy of the SortedArray.","lua_type":"SortedArray<T>"}],"function_type":"method","source":{"line":706,"path":"src/Arrays/SortedArray.luau"}},{"name":"CloneDeep","desc":"Makes a deep copy of the SortedArray and returns a new SortedArray.","params":[],"returns":[{"desc":"A deep copy of the SortedArray.","lua_type":"SortedArray<T>"}],"function_type":"method","source":{"line":714,"path":"src/Arrays/SortedArray.luau"}},{"name":"Clear","desc":"Clears the SortedArray.","params":[],"returns":[{"desc":"","lua_type":"SortedArray<T>"}],"function_type":"method","since":"v1.1.0","source":{"line":723,"path":"src/Arrays/SortedArray.luau"}},{"name":"RemoveElement","desc":"Searches the array via [SortedArray.Find]. If found, it removes the value\\nand returns the value, otherwise returns undefined. Only removes a single\\noccurrence.","params":[{"name":"signature","desc":"The value you want to remove.","lua_type":"T"},{"name":"equalityCheck?","desc":"An optional function which checks for equality between the passed-in element and the other elements in the SortedArray.","lua_type":"ComparisonFunction<T>"},{"name":"lessThan?","desc":"An optional less-than comparison function, which falls back on the comparison passed in from [SortedArray.new].","lua_type":"ComparisonFunction<T>"}],"returns":[{"desc":"The removed value.","lua_type":"T?"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":777,"path":"src/Arrays/SortedArray.luau"}},{"name":"RemoveIndex","desc":"Removes an element from the SortedArray by index. Returns the removed\\nelement. This is literally just `table.remove`.","params":[{"name":"index","desc":"The index of the element to remove.","lua_type":"integer"}],"returns":[{"desc":"The removed element.","lua_type":"T?"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":804,"path":"src/Arrays/SortedArray.luau"}},{"name":"Pop","desc":"Pops an element from the SortedArray. This just removes the last element.","params":[],"returns":[{"desc":"The removed element.","lua_type":"T?"}],"function_type":"method","source":{"line":810,"path":"src/Arrays/SortedArray.luau"}},{"name":"Shift","desc":"Shifts element from the SortedArray. This just removes the first element.","params":[],"returns":[{"desc":"The removed element.","lua_type":"T?"}],"function_type":"method","source":{"line":823,"path":"src/Arrays/SortedArray.luau"}},{"name":"Sort","desc":"Does `table.sort` on the SortedArray\'s array. Pretty useless.","params":[],"returns":[{"desc":"","lua_type":"SortedArray<T>"}],"function_type":"method","source":{"line":831,"path":"src/Arrays/SortedArray.luau"}},{"name":"SortIndex","desc":"Removes the value at `index` and re-inserts it. This is useful for when a\\nvalue may have updated in a way that could change it\'s position in a\\n`SortedArray`. Returns the new position of the element.","params":[{"name":"index","desc":"The index of the element to sort.","lua_type":"integer"}],"returns":[{"desc":"The new position of the element.","lua_type":"integer"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."},{"lua_type":"ElementNotFoundError","desc":"Thrown when the element you are trying to sort is not found."}],"source":{"line":847,"path":"src/Arrays/SortedArray.luau"}},{"name":"SortElement","desc":"Calls [SortedArray.RemoveElement]`(signature, equalityCheck, lessThan)` and\\nre-inserts the value. This is useful for when a value may have updated in a\\nway that could change it\'s position in a `SortedArray`. Returns the new\\nposition of the element.","params":[{"name":"signature","desc":"The value you want to remove.","lua_type":"T"},{"name":"equalityCheck?","desc":"An optional function which checks for equality between the passed-in element and the other elements in the SortedArray.","lua_type":"ComparisonFunction<T>"},{"name":"lessThan?","desc":"An optional less-than comparison function, which falls back on the comparison passed in from [SortedArray.new].","lua_type":"ComparisonFunction<T>"}],"returns":[{"desc":"The new position of the element.","lua_type":"integer"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."},{"lua_type":"ElementNotFoundError","desc":"Thrown when the element you are trying to sort is not found."}],"source":{"line":883,"path":"src/Arrays/SortedArray.luau"}},{"name":"GetIntersection","desc":"Gets an intersection between two SortedArrays.","params":[{"name":"other","desc":"The other SortedArray to get the intersection with.","lua_type":"SortedArray<T>"},{"name":"equalityCheck?","desc":"An optional function which checks for equality between the passed-in element and the other elements in the SortedArray.","lua_type":"ComparisonFunction<T>"},{"name":"lessThan?","desc":"An optional less-than comparison function, which falls back on the comparison passed in from [SortedArray.new].","lua_type":"ComparisonFunction<T>"}],"returns":[{"desc":"The intersection of the two SortedArrays. This is a new SortedArray.","lua_type":"SortedArray<T>"}],"function_type":"method","errors":[{"lua_type":"DebugTypeError","desc":"Thrown when you are using debug mode and you pass an incorrect type."}],"source":{"line":929,"path":"src/Arrays/SortedArray.luau"}},{"name":"IsEmpty","desc":"Checks if the SortedArray is empty.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":987,"path":"src/Arrays/SortedArray.luau"}}],"properties":[{"name":"Array","desc":"The actual array of data. You can iterate over this or index it.\\n\\n:::warning Readonly\\n_PLEASE_ treat this array as readonly. Do not mutate it directly.\\n:::","lua_type":"ReadonlyArray<T>","readonly":true,"source":{"line":379,"path":"src/Arrays/SortedArray.luau"}},{"name":"Comparison","desc":"The comparison function of the `SortedArray`.","lua_type":"ComparisonFunction<T>?","readonly":true,"source":{"line":387,"path":"src/Arrays/SortedArray.luau"}}],"types":[],"name":"SortedArray","desc":"A class to create automatically sorted arrays. Must contain objects\\ncomparable to one another (that can use the `<` and `==` operators).\\nNumbers and strings support these operators by default.","tags":["Optimization","Supports Debug Mode","Supports __len","Supports __tostring"],"source":{"line":339,"path":"src/Arrays/SortedArray.luau"}}')}}]);